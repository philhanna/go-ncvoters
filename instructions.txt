To parse a YAML file in Go, you can use the `gopkg.in/yaml.v2` package. Here's an example of how you can accomplish this:

First, you'll need to install the `gopkg.in/yaml.v2` package if you haven't already. You can do this by running the following command:

```
go get gopkg.in/yaml.v2
```

Once the package is installed, you can start parsing YAML files. Here's an example:

```go
package main

import (
	"fmt"
	"io/ioutil"
	"log"

	"gopkg.in/yaml.v2"
)

type Config struct {
	Server   ServerConfig   `yaml:"server"`
	Database DatabaseConfig `yaml:"database"`
}

type ServerConfig struct {
	Host string `yaml:"host"`
	Port int    `yaml:"port"`
}

type DatabaseConfig struct {
	Username string `yaml:"username"`
	Password string `yaml:"password"`
	DBName   string `yaml:"dbname"`
}

func main() {
	// Read the YAML file
	yamlFile, err := ioutil.ReadFile("config.yaml")
	if err != nil {
		log.Fatalf("Failed to read YAML file: %v", err)
	}

	// Parse the YAML data into a Config struct
	var config Config
	err = yaml.Unmarshal(yamlFile, &config)
	if err != nil {
		log.Fatalf("Failed to parse YAML: %v", err)
	}

	// Access the parsed data
	fmt.Println("Server Host:", config.Server.Host)
	fmt.Println("Server Port:", config.Server.Port)
	fmt.Println("Database Username:", config.Database.Username)
	fmt.Println("Database Password:", config.Database.Password)
	fmt.Println("Database Name:", config.Database.DBName)
}
```

In this example, we define a `Config` struct that represents the structure of the YAML file. We use struct tags (`yaml:"..."`) to map the YAML keys to struct fields. The `ServerConfig` and `DatabaseConfig` are embedded structs inside the `Config` struct.

We then use the `ioutil.ReadFile` function to read the YAML file into a byte slice. Next, we call `yaml.Unmarshal` to parse the YAML data into our `Config` struct. If there are any errors during parsing, we log a fatal error.

Finally, we can access the parsed data from the `Config` struct and print it to the console.

Make sure to replace `"config.yaml"` with the actual path to your YAML file.

That's it! With this example, you should be able to parse a YAML file in Go using the `gopkg.in/yaml.v2` package.